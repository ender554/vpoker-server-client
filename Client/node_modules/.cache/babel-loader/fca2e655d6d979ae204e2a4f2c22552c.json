{"ast":null,"code":"import _classCallCheck from \"/home/josh/Desktop/Thinkful/projects/pcap/Client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/josh/Desktop/Thinkful/projects/pcap/Client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/josh/Desktop/Thinkful/projects/pcap/Client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/josh/Desktop/Thinkful/projects/pcap/Client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/josh/Desktop/Thinkful/projects/pcap/Client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/josh/Desktop/Thinkful/projects/pcap/Client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/josh/Desktop/Thinkful/projects/pcap/Client/src/component/training.js\";\nimport Deck from \"react-poker\";\nimport React from 'react';\nimport \"/training.css\";\n\nvar range = function range(start, count) {\n  return Array.apply(0, Array(count)).map(function (element, index) {\n    return index + start;\n  });\n};\n\nfunction shuffle(array) {\n  var copy = [];\n  var n = array.length;\n  var i; // While there remain elements to shuffle…\n\n  while (n) {\n    // Pick a remaining element…\n    i = Math.floor(Math.random() * array.length); // If not already shuffled, move it to the new array.\n\n    if (i in array) {\n      copy.push(array[i]);\n      delete array[i];\n      n--;\n    }\n  }\n\n  return copy;\n}\n\nvar suits = [\"d\", \"c\", \"h\", \"s\"];\nvar ranks = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"];\n\nvar getDeck = function getDeck() {\n  return shuffle(ranks.map(function (r) {\n    return suits.map(function (s) {\n      return r + s;\n    });\n  }).reduce(function (prev, curr) {\n    return prev.concat(curr);\n  }));\n};\n\nvar Training =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Training, _React$Component);\n\n  function Training(props) {\n    var _this;\n\n    _classCallCheck(this, Training);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Training).call(this, props));\n    _this.state = {\n      board: [],\n      deck: getDeck()\n    };\n    _this.progressDeal = _this.progressDeal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Training, [{\n    key: \"newRound\",\n    value: function newRound() {\n      var _this$state = this.state,\n          deck = _this$state.deck,\n          board = _this$state.board;\n      var newDeck = getDeck();\n      this.setState(Object.assign({}, {\n        board: [],\n        deck: newDeck\n      }));\n    }\n  }, {\n    key: \"dealFlop\",\n    value: function dealFlop() {\n      var _this$state2 = this.state,\n          deck = _this$state2.deck,\n          board = _this$state2.board;\n      var flop = range(0, 3).map(function (e) {\n        return deck.pop();\n      });\n      this.setState(Object.assign({}, {\n        board: flop,\n        deck: deck\n      }));\n    }\n  }, {\n    key: \"dealCard\",\n    value: function dealCard() {\n      var _this$state3 = this.state,\n          deck = _this$state3.deck,\n          board = _this$state3.board;\n      var card = deck.pop();\n      this.setState(Object.assign({}, {\n        deck: deck,\n        board: board.concat(card)\n      }));\n    }\n  }, {\n    key: \"progressDeal\",\n    value: function progressDeal() {\n      var _this$state4 = this.state,\n          deck = _this$state4.deck,\n          board = _this$state4.board;\n\n      if (board.length === 0) {\n        this.dealFlop();\n        return;\n      }\n\n      if (board.length === 5) {\n        this.newRound();\n      } else {\n        this.dealCard();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var board = this.state.board;\n      return React.createElement(\"div\", {\n        style: {\n          left: \"10vw\",\n          top: \"10vh\",\n          position: \"absolute\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        style: {\n          padding: \"1.5em\",\n          margin: \"2em\"\n        },\n        onClick: this.progressDeal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Deal\"), React.createElement(Deck, {\n        board: [\"3s\", \"Qh\", \"As\"],\n        boardXoffset: 375 // X axis pixel offset for dealing board\n        ,\n        boardYoffset: 200 // Y axis pixel offset for dealing board\n        ,\n        size: 200 // card height in pixels\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Training;\n}(React.Component);\n\nexport default Training;","map":{"version":3,"sources":["/home/josh/Desktop/Thinkful/projects/pcap/Client/src/component/training.js"],"names":["Deck","React","range","start","count","Array","apply","map","element","index","shuffle","array","copy","n","length","i","Math","floor","random","push","suits","ranks","getDeck","r","s","reduce","prev","curr","concat","Training","props","state","board","deck","progressDeal","bind","newDeck","setState","Object","assign","flop","e","pop","card","dealFlop","newRound","dealCard","left","top","position","padding","margin","Component"],"mappings":"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","sourcesContent":["import Deck from \"react-poker\";\nimport React from 'react';\nimport \"/training.css\";\n\nconst range = (start, count) =>\n  Array.apply(0, Array(count)).map((element, index) => {\n    return index + start;\n  });\n\nfunction shuffle(array) {\n  const copy = [];\n  let n = array.length;\n  let i;\n  // While there remain elements to shuffle…\n  while (n) {\n    // Pick a remaining element…\n    i = Math.floor(Math.random() * array.length);\n\n    // If not already shuffled, move it to the new array.\n    if (i in array) {\n      copy.push(array[i]);\n      delete array[i];\n      n--;\n    }\n  }\n\n  return copy;\n}\n\nconst suits = [\"d\", \"c\", \"h\", \"s\"];\nconst ranks = [\n  \"A\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"10\",\n  \"J\",\n  \"Q\",\n  \"K\"\n];\n\nconst getDeck = () =>\n  shuffle(\n    ranks\n      .map(r => suits.map(s => r + s))\n      .reduce((prev, curr) => prev.concat(curr))\n  );\n\nclass Training extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { board: [], deck: getDeck() };\n    this.progressDeal = this.progressDeal.bind(this);\n  }\n\n  newRound() {\n    const { deck, board } = this.state;\n\n    const newDeck = getDeck();\n    this.setState(Object.assign({}, { board: [], deck: newDeck }));\n  }\n\n  dealFlop() {\n    const { deck, board } = this.state;\n    const flop = range(0, 3).map(e => deck.pop());\n\n    this.setState(Object.assign({}, { board: flop, deck }));\n  }\n\n  dealCard() {\n    const { deck, board } = this.state;\n    const card = deck.pop();\n\n    this.setState(Object.assign({}, { deck, board: board.concat(card) }));\n  }\n\n  progressDeal() {\n    const { deck, board } = this.state;\n\n    if (board.length === 0) {\n      this.dealFlop();\n      return;\n    }\n\n    if (board.length === 5) {\n      this.newRound();\n    } else {\n      this.dealCard();\n    }\n  }\n\n  render() {\n    const { board } = this.state;\n\n    return (\n      <div style={{ left: \"10vw\", top: \"10vh\", position: \"absolute\" }}>\n        <button\n          style={{ padding: \"1.5em\", margin: \"2em\" }}\n          onClick={this.progressDeal}\n        >\n          Deal\n        </button>\n        <Deck\n          board={[\"3s\", \"Qh\", \"As\"]}\n          boardXoffset={375} // X axis pixel offset for dealing board\n          boardYoffset={200} // Y axis pixel offset for dealing board\n          size={200} // card height in pixels\n        />\n      </div>\n    );\n  }\n}\n\nexport default Training;"]},"metadata":{},"sourceType":"module"}