{"ast":null,"code":"var _classCallCheck = require(\"/home/josh/Desktop/Thinkful/projects/pcap/Client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/josh/Desktop/Thinkful/projects/pcap/Client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('../rank'),\n    Rank = _require.Rank;\n\nvar _require2 = require('../suit'),\n    Suit = _require2.Suit;\n\nvar props = new WeakMap();\n/**\r\n * @class Card\r\n * @param suit {Suit}\r\n * @param rank {Rank}\r\n * @description The main class for representing a single card\r\n */\n\nvar Card =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function Card(suit, rank) {\n    _classCallCheck(this, Card);\n\n    if (!(suit instanceof Suit)) {\n      throw new Error('Card: Invalid card suit provided, must be an instance of Suit');\n    }\n\n    if (!(rank instanceof Rank)) {\n      throw new Error('Card: Invalid card rank provided, must be an instance of Rank');\n    }\n\n    props.set(this, {\n      deck: null\n    });\n    /** @member {Suit} */\n\n    this.suit = suit;\n    /** @member {Rank} */\n\n    this.rank = rank;\n    Object.freeze(this);\n  }\n  /**\r\n   * Returns a human-readable string representation of the card object\r\n   *\r\n   * eg. `\"<Card suit=spades rank=Ace>\"`\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  _createClass(Card, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"<Card suit=\".concat(this.suit.name, \" value=\").concat(this.rank.longName, \">\");\n    }\n    /**\r\n     * @type {Deck}\r\n     * @description The deck instance that this card belongs to\r\n     */\n\n  }, {\n    key: \"deck\",\n    get: function get() {\n      return props.get(this).deck;\n    },\n    set: function set(deck) {\n      var _require3 = require('../deck'),\n          Deck = _require3.Deck;\n\n      var _props = props.get(this);\n\n      if (deck instanceof Deck) {\n        if (_props.deck) {\n          _props.deck = null;\n\n          _props.deck.remove(this);\n        }\n\n        _props.deck = deck;\n      } else if (deck == null) {\n        _props.deck = null;\n      }\n    }\n    /**\r\n     * @type {string|void}\r\n     * @description The unicode character that represents this particular card if one exists\r\n     */\n\n  }, {\n    key: \"unicode\",\n    get: function get() {\n      return this.suit.unicodeCards.get(this.rank);\n    }\n  }]);\n\n  return Card;\n}();\n\nexports.Card = Card;","map":null,"metadata":{},"sourceType":"script"}